@using Umbraco.Forms.Core.Models
@using Umbraco.Forms.Web.Services
@using UmbracoProject.App_Code.Models
@model FormViewModel
@inject IFormRenderingService _formRenderingService;

@if (Model != null)
{
    if (Model.FormId != Guid.Empty)
    {
        var form = _formRenderingService.GetForm(Model.FormId);
        if (form is null)
        {
            <p>Form not found.</p>
        }
        else
        {
            if (Model.FormContent is not null)
            {
                <div class="form-submitted d-none">
                    <div class="icon">
                        <img src="@(!string.IsNullOrWhiteSpace(Model.FormContent.SuccessMessageIcon?.Url())?Model.FormContent.SuccessMessageIcon?.Url():"~/assets/img/icons/thumbs-up-black.svg")" alt="" class="img-fluid">
                    </div>
                    <div class="content">
                        @Html.Raw(Model.FormContent.SuccessMessage)
                        @if (!string.IsNullOrWhiteSpace(Model.FormContent.AfterSuccessRedirectionButton?.Url))
                        {
                            <a href="@Model.FormContent.AfterSuccessRedirectionButton.Url" class="btn @(Model.FormContent.SubmitButtonTheme)" style="border:1px solid #@Model.FormContent.SubmitButtonBorderColor">@Model.FormContent.AfterSuccessRedirectionButton.Name</a>
                        }
                    </div>
                </div>

                <div class="form-outer">
                    <div class="form-headings">
                        @if (!string.IsNullOrWhiteSpace(Model.FormContent.HeadingText))
                        {
                            <h4 class="form-title">@Model.FormContent.HeadingText</h4>
                        }
                        @if (!string.IsNullOrWhiteSpace(Model.FormContent.DescriptionText?.ToString()))
                        {
                            @Html?.Raw(Model.FormContent?.DescriptionText)
                        }
                    </div>
                    <form>
                        @Html.AntiForgeryToken()
                        @Html.Hidden("formId", @form.Id)
                        <div class="row">
                            @foreach (var item in form.AllFields)
                            {
                                var fieldType = item?.Settings?.FirstOrDefault(x => x.Key == "FieldType").Value;
                                var placeholder = item?.Settings?.FirstOrDefault(x => x.Key == "Placeholder").Value;
                                var numberOfRows = item?.Settings?.FirstOrDefault(x => x.Key == "NumberOfRows").Value;
                                @switch (fieldType)
                                {
                                    case "text":
                                    case "email":
                                    case "number":
                                        var isFullLengthField = item?.Alias == "gSRNNummer" || item?.Alias == "cPRNummer";
                                        var maximumLength = item?.Settings?.FirstOrDefault(x => x.Key == "MaximumLength").Value;
                                        <div class="col-md-@(fieldType == "number" && isFullLengthField ? 12 : 6)">
                                            <div class="form-group">
                                                <label for="@item?.Alias" class="label">@item?.Caption</label>
                                                <input type="@fieldType"
                                                       name="@item?.Alias"
                                                       id="@item?.Alias"
                                                       maxlength="@maximumLength"
                                                       placeholder="@placeholder"
                                                       class="form-control @(item?.Mandatory == true ? "required" : "") @(!string.IsNullOrWhiteSpace(item?.RegEx)? "regex-reuired":"")"
                                                       data-regex="@item?.RegEx" />
                                                @if (item?.Mandatory == true)
                                                {
                                                    <p class="error-text required-error d-none">
                                                        <img src="~/assets/img/icons/error-icon.svg" alt=""> @item?.RequiredErrorMessage
                                                    </p>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(item?.RegEx))
                                                {
                                                    <p class="error-text regex-error d-none">
                                                        <img src="~/assets/img/icons/error-icon.svg" alt=""> @item?.InvalidErrorMessage
                                                    </p>
                                                }
                                            </div>
                                        </div>
                                        break;
                                }

                                @if (!string.IsNullOrWhiteSpace(numberOfRows))
                                {
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="@item?.Alias" class="label">@item?.Caption</label>
                                            <textarea name="@item?.Alias" id="@item?.Alias" class="form-control @(item?.Mandatory == true ? "required" : "")" placeholder="@placeholder"></textarea>
                                            @if (item?.Mandatory == true)
                                            {
                                                <p class="error-text d-none">
                                                    <img src="~/assets/img/icons/error-icon.svg" alt=""> @item?.RequiredErrorMessage
                                                </p>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        @{
                            switch (form.Id.ToString())
                            {
                                case "1642f23d-5f9f-4d2e-87b4-e6f55be9843a": // Sunbeam form
                                    <button type="button" class="btn form_submit_btn @Model?.FormContent?.SubmitButtonTheme sunbeam_story_form_submit" style="border:1px solid #@Model?.FormContent?.SubmitButtonBorderColor"> @form.SubmitLabel</button>
                                    break;

                                case "2e853598-a701-40d5-b6b8-51113492b7b2": // Change existing charging box form
                                    <button type="button" class="btn form_submit_btn @Model?.FormContent?.SubmitButtonTheme change_existing_box_form_submit" style="border:1px solid #@Model?.FormContent?.SubmitButtonBorderColor"> @form.SubmitLabel</button>
                                    break;

                                case "48a10517-c09f-429b-afeb-6764082245d3": // Tailor Charging Solution Form
                                    <button type="button" class="btn form_submit_btn @Model?.FormContent?.SubmitButtonTheme tailor_charging_solution_submit" style="border:1px solid #@Model?.FormContent?.SubmitButtonBorderColor"> @form.SubmitLabel</button>
                                    break;

                                case "95f4292c-3068-4376-bd2e-8f264263e201": // Board of Representatives Form
                                    <button type="button" class="btn form_submit_btn @Model?.FormContent?.SubmitButtonTheme representatives_form_submit" style="border:1px solid #@Model?.FormContent?.SubmitButtonBorderColor"> @form.SubmitLabel</button>
                                    break;
                            }
                        }
                    </form>
                </div>
            }
        }
    }
}
else
{
    <p>Form not found.</p>
}
